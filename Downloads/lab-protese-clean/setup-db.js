// setup-db.js
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Script de configura√ß√£o autom√°tica do banco de dados para deploy na Vercel
 * 
 * Este script:
 * 1. Verifica se o ambiente Vercel est√° configurado corretamente
 * 2. Cria a estrutura necess√°ria para o banco D1
 * 3. Executa o script de migra√ß√£o inicial
 * 4. Configura as vari√°veis de ambiente necess√°rias
 */

function setupDatabase() {
  console.log('üöÄ Iniciando configura√ß√£o do banco de dados para ProTech Lab...');
  
  try {
    // Verificar se estamos em ambiente Vercel
    const isVercel = process.env.VERCEL === '1';
    if (!isVercel) {
      console.log('‚ö†Ô∏è  Este script √© destinado para execu√ß√£o no ambiente Vercel.');
      console.log('    Para desenvolvimento local, use o wrangler CLI.');
      return;
    }

    // Criar diret√≥rio para D1 (caso n√£o exista)
    const dbDir = path.join(process.cwd(), '.wrangler', 'state', 'v3', 'd1');
    if (!fs.existsSync(dbDir)) {
      console.log('üìÅ Criando diret√≥rio para banco D1...');
      fs.mkdirSync(dbDir, { recursive: true });
    }

    // Ler o script SQL de migra√ß√£o
    const migrationPath = path.join(process.cwd(), 'migrations', '0001_initial.sql');
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Arquivo de migra√ß√£o n√£o encontrado: ${migrationPath}`);
    }
    
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // Criar arquivo de banco de dados SQLite
    const dbFilePath = path.join(dbDir, 'lab-protese-db.sqlite');
    
    // Se o banco j√° existir, fazer backup
    if (fs.existsSync(dbFilePath)) {
      const backupPath = `${dbFilePath}.backup-${Date.now()}`;
      console.log(`üîÑ Banco de dados existente. Criando backup em: ${backupPath}`);
      fs.copyFileSync(dbFilePath, backupPath);
    }
    
    // Criar banco SQLite e executar script de migra√ß√£o
    console.log('üóÉÔ∏è  Criando banco de dados e executando migra√ß√µes...');
    
    // Inicializar o banco SQLite e executar as migra√ß√µes
    const sqlite3 = require('better-sqlite3');
    const db = sqlite3(dbFilePath);
    
    // Executar o script de migra√ß√£o completo
    db.exec(migrationSQL);
    
    // Fechar conex√£o
    db.close();
    
    // Verificar se JWT_SECRET est√° configurado
    if (!process.env.JWT_SECRET) {
      console.log('üîë Gerando JWT_SECRET para autentica√ß√£o...');
      // Gerar string aleat√≥ria para JWT_SECRET
      const crypto = require('crypto');
      const jwtSecret = crypto.randomBytes(64).toString('hex');
      
      // Adicionar ao .env.local (para desenvolvimento local)
      fs.appendFileSync('.env.local', `\nJWT_SECRET=${jwtSecret}\n`);
      console.log('‚úÖ JWT_SECRET gerado e adicionado ao .env.local');
      console.log('‚ö†Ô∏è  IMPORTANTE: Configure esta vari√°vel no painel da Vercel:');
      console.log(`    JWT_SECRET=${jwtSecret}`);
    }
    
    console.log('‚úÖ Configura√ß√£o de banco de dados conclu√≠da com sucesso!');
    console.log('');
    console.log('üåê Para concluir a implanta√ß√£o na Vercel:');
    console.log('1. Configure as vari√°veis de ambiente no painel da Vercel:');
    console.log('   - JWT_SECRET (gerado acima)');
    console.log('   - JWT_EXPIRATION=7d');
    console.log('   - DATABASE_URL=file:./.wrangler/state/v3/d1/lab-protese-db.sqlite');
    console.log('2. Associe seu dom√≠nio personalizado no painel da Vercel');
    console.log('3. Ap√≥s o deploy, fa√ßa login com as credenciais:');
    console.log('   - Admin: admin@protechlab.com / senha123');
    console.log('   - T√©cnico: tecnico@protechlab.com / senha123');
    
  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o do banco de dados:');
    console.error(error);
    process.exit(1);
  }
}

// Executar a fun√ß√£o principal
setupDatabase();
